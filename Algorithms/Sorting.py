# -*- coding: utf-8 -*-
"""csc505-hw2_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZkSB8tYUrJkfdjtnOfclD251y9crw88Q
"""

#from google.colab import drive
#drive.mount('/content/gdrive', force_remount=True)
path = '/content/gdrive/My Drive/CSC-505/'
path = "C:\\Users\\Shubham\\Desktop\\Spring20\\CSC 505\\hw2\\csc505-master\\csc505-master\\HW2\\"
from os import listdir
import gzip
import time
from dateutil.parser import parse
import random
import numpy as np

filelist = [f for f in listdir(path)]

#https://www.geeksforgeeks.org/bubble-sort/
def bubblesort(inputdata):
  

  n = len(inputdata)
  for i in range(n):
    for j in range(0,n-i-1):
      if inputdata[j][0] > inputdata[j+1][0]:
        inputdata[j],inputdata[j+1] = inputdata[j+1],inputdata[j]
  return inputdata

#https://gist.github.com/JeremieGomez/fd3498e0b9df0980ad56

def quicksort(arr, start, end, pivot_mode='random'):
	if start < end:
		split = partition(arr, start, end, pivot_mode)
		quicksort(arr, start, split-1, pivot_mode)
		quicksort(arr, split+1, end, pivot_mode)
	return arr

def partition(arr, start, end, pivot_mode):
	if pivot_mode == 'first':
		pivot = arr[start]
	else:
		pivot_index = random.randrange(start,end)
		pivot = arr[pivot_index]
		arr[pivot_index], arr[start] = arr[start], arr[pivot_index] # place the pivot at the beginning
	i = start + 1
	for j in range(start+1,end+1):
		if arr[j][0] < pivot[0]:
			arr[i], arr[j] = arr[j], arr[i]
			i += 1
	arr[start], arr[i-1] = arr[i-1], arr[start]
	return i-1

for file in filelist:
    start_time = time.time()
    f=gzip.open(path+file,'rb')
    file_content=f.read()
    file_content = str(file_content, 'utf-8')
    file_content = file_content.splitlines()
    for j in range(len(file_content)):
      file_content[j] = file_content[j].split()
    #file_contentb = file_content
    #file_contentq = file_content
    #file_contentm = file_content
    
    print("File read time", file)
    print("--- Run time: %s seconds ---" % (time.time() - start_time))
    
    start_time = time.time()

    for i in range(len(file_content)):
      file_content[i][0] = parse(file_content[i][0])
    file_content = np.array(file_content)
    print("Conversion time")
    print("--- Run time: %s seconds ---" % (time.time() - start_time))
    start_time = time.time()
    #new = mergeSort(file_content)
    #new = np.sort(file_content, kind = 'quicksort')
    new = quicksort(file_content, 0, len(file_content)-1, pivot_mode='random')
    print("sorting time")
    print("--- Run time: %s seconds ---" % (time.time() - start_time))